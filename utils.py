import json
import re
import requests
from logger import setup_logger
from telebot.types import ReplyKeyboardMarkup, KeyboardButton


logger = setup_logger(__name__)

def read_json(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return {}

def write_json(file_path, data):
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ {file_path}: {e}")


def add_user_to_json(file_path, user_id, user_name):
    users = read_json(file_path)
    if user_id in users.values():
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ {file_path}")
        return False
    else:
        users[user_name] = user_id
        write_json(file_path, users)
        return True


def remove_user_from_json(file_path, user_name):
    users = read_json(file_path)
    if user_name in users:
        del users[user_name]
        write_json(file_path, users)

def is_valid_number(number):
    return bool(re.match(r'^[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•ABEKMHOPCTYX]\d{3}[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•ABEKMHOPCTYX]{2}\d{2,3}$', number))

def create_keyboard(buttons, one_time_keyboard=True, row_width=2):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=one_time_keyboard)
    for i in range(0, len(buttons), row_width):
        row_buttons = [KeyboardButton(button) for button in buttons[i:i + row_width]]
        markup.add(*row_buttons)
    return markup

def get_phone_number(sale_id):
    phone_url = f"https://autokochka.ru/ajax/sale/getPhone/?sale_id={sale_id}"
    response = requests.get(phone_url)
    if response.status_code == 200:
        data = response.json()
        if data.get("ok"):
            return data.get("data", {}).get("phone")
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {sale_id}")
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Å –∫–æ–¥–æ–º –æ—Ç–≤–µ—Ç–∞ HTTP {response.status_code}")
    return None

def format_ads_info(ads_info, is_new_ad=False, ads_count=None):
    if not ads_info:
        return "–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

    header = "üÜï –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n" if is_new_ad else ""
    # ads_count_header = f"–î—Ä—É–≥–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º: {ads_count}" if ads_count and ads_count > 1 else ""
    formatted_ads = []  # –ù–∞—á–∏–Ω–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π

    for ad in ads_info:
        ad_text = (
            f"{header}"
            f"<b>–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å:</b> {ad['title']}, {ad['year']}\n"
            f"<b>–ü—Ä–∏–≤–æ–¥:</b> {ad['drive']}\n"
            f"<b>–ì–æ—Ä–æ–¥:</b> {ad['city']}\n"
            f"<b>–ù–æ–º–µ—Ä:</b> {ad.get('car_number', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω')}\n"
            f"<b>–¶–µ–Ω–∞:</b> {ad['price']}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {ad['phone_number']}\n"
            f"{ad['ad_link']}"
        )
        formatted_ads.append(ad_text)

        if 'existing_ads_links' in ad and ad['existing_ads_links']:
            existing_ads_text = "\nüëÄ –î—Ä—É–≥–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º:\n" + "\n".join(
                [f"\n{link}" for link in ad['existing_ads_links']]
            )
            formatted_ads.append(existing_ads_text)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –≤ –Ω–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    # if ads_count_header:
    #     formatted_ads.insert(0, ads_count_header)

    return "\n\n".join(formatted_ads)
